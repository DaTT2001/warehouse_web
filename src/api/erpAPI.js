import axios from "axios";
import { API_ERP_URL } from "../utils/constants";

// H√†m g·ªçi API Inventory
const requestInventory = async (params = {}) => {
    try {
      // ‚ùå Lo·∫°i b·ªè undefined/null/r·ªóng tr∆∞·ªõc khi g·ª≠i request
      const filteredParams = Object.fromEntries(
        Object.entries(params).filter(([key, v]) => 
          v !== undefined && v !== null && (key !== "search" || v.trim() !== "")
        )
      );
  
      const queryParams = new URLSearchParams(filteredParams).toString();
      const response = await axios.get(`${API_ERP_URL}/inventory?${queryParams}`);
  
      console.log(`üîó API Request: ${API_ERP_URL}/inventory?${queryParams}`);
      return response.data;
    } catch (error) {
      console.error("‚ùå L·ªói API Inventory:", error.response?.data?.error || error.message);
      throw new Error("L·ªói khi g·ªçi API Inventory!");
    }
  };
  

// üè™ API Inventory (H√†ng t·ªìn kho)

// üîπ L·∫•y danh s√°ch h√†ng t·ªìn kho c√≥ ph√¢n trang & filter

export const getInventory = async ({
  id,
  category,
  minQty,
  maxQty,
  search,
  page = 1,
  limit = 50,
} = {}) => {
  return requestInventory({ id, category, minQty, maxQty, search, page, limit });
};

// üîπ L·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
export const getTotalQuantity = async () => {
  try {
    const response = await axios.get(`${API_ERP_URL}/inventory/total-qty`);
    if (response.data && response.data.totalQty !== undefined) {
      return response.data.totalQty;
    } else {
      throw new Error("Kh√¥ng t√¨m th·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m");
    }
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m:", error.response?.data?.error || error.message);
    throw new Error("L·ªói khi l·∫•y t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m!");
  }
};

// üîπ L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo ID
export const getInventoryByID = async (productID) => {
  try {
    const response = await axios.get(`${API_ERP_URL}/inventory/${productID}`);
    if (response.data) {
      return response.data;
    } else {
      throw new Error("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
    }
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y th√¥ng tin s·∫£n ph·∫©m:", error.response?.data?.error || error.message);
    throw new Error("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m!");
  }
};

export const updateProductQuantity = async (productId, quantityToSubtract) => {
  try {
    const response = await axios.put(`${API_ERP_URL}/inventory/${productId}/qty`, {
      qty_to_subtract: quantityToSubtract,
    });

    if (response.data) {
      return response.data;
    } else {
      throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m");
    }
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m:", error.response?.data?.error || error.message);
    throw new Error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m!");
  }
};

export const updoProductQuantity = async (productId, quantityToUndo) => {
  try {
    const response = await axios.put(`${API_ERP_URL}/inventory/${productId}/add-qty`, {
      qty_to_add: quantityToUndo,
    });

    if (response.data) {
      return response.data;
    } else {
      throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m");
    }
  } catch (error) {
    console.error("‚ùå L·ªói ho√†n t√°c s·ªë l∆∞·ª£ng s·∫£n ph·∫©m:", error.response?.data?.error || error.message);
    throw new Error("L·ªói khi ho√†n t√°c s·ªë l∆∞·ª£ng s·∫£n ph·∫©m!");
  }
};

