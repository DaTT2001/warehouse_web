import { useState, useEffect } from "react";
import { Modal, Button, Form, Table } from "react-bootstrap";
import { generateUniqueOrderID, getEmployeeData, getInventoryByID, insertData } from "../api/erpAPI";
import { saveOrder } from "../api/warehouseAPI";
import { toast } from "react-toastify";
import { jwtDecode } from "jwt-decode";
import { activityLogger } from "../utils/activityLogger";
import { getCurrentTimeString } from "../utils/functions";

const TakeProductModal = ({ show, handleClose }) => {
  const [productID, setProductID] = useState("");
  const [quantity, setQuantity] = useState("");
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [orderData, setOrderData] = useState(null); // L∆∞u ƒë∆°n h√†ng xem tr∆∞·ªõc
  const [showPreview, setShowPreview] = useState(false); // Ki·ªÉm so√°t hi·ªÉn th·ªã modal preview
  const [countdown, setCountdown] = useState(300); // ƒê·∫øm ng∆∞·ª£c 5 ph√∫t
  const [isProductIDDisabled, setIsProductIDDisabled] = useState(false); // Tr·∫°ng th√°i disable c·ªßa √¥ nh·∫≠p m√£ s·∫£n ph·∫©m
  // const [employeeData, setEmployeeData] = useState(null);

  useEffect(() => {
    let timer;
    if (showPreview && countdown > 0) {
      timer = setInterval(() => {
        setCountdown((prev) => prev - 1);
      }, 1000);
    } else if (countdown === 0) {
      setShowPreview(false);
      setOrderData(null);
      toast.info("H·∫øt th·ªùi gian x√°c nh·∫≠n, ƒë∆°n xu·∫•t kho ƒë√£ b·ªã h·ªßy! ‚è≥");
    }

    return () => clearInterval(timer);
  }, [showPreview, countdown]);

  const handleCheckProduct = async () => {
    try {
      const product = await getInventoryByID(productID);
      if (product) {
        setSelectedProduct(product);
        console.log(product);
        
        setQuantity("");
        setIsProductIDDisabled(true); // Disable √¥ nh·∫≠p m√£ s·∫£n ph·∫©m
      } else {
        toast.error("M√£ s·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i!");
      }
    } catch (error) {
      toast.error("L·ªói khi l·∫•y th√¥ng tin s·∫£n ph·∫©m!");
    }
  };

  const handlePreviewOrder = () => {
    if (!selectedProduct || !quantity) return;
    if (selectedProduct.qty_available - parseInt(quantity) < 0) return;

    // L·∫•y token t·ª´ sessionStorage
    const token = sessionStorage.getItem("token");
    if (!token) {
      toast.error("L·ªói: Kh√¥ng t√¨m th·∫•y token! ‚ùå");
      return;
    }

    try {
      const decoded = jwtDecode(token); // Gi·∫£i m√£ token

      setOrderData({
        employee_name: decoded.fullname,
        employee_id: decoded.username,
        role: decoded.role,
        productid: selectedProduct.PRODUCT_ID,
        productname: selectedProduct.PRODUCT_NAME,
        quantity: parseInt(quantity),
        timestamp: new Date().toISOString(),
        type: "Export",
      });

      setCountdown(300); // Reset countdown
      setShowPreview(true); // M·ªü modal xem tr∆∞·ªõc ƒë∆°n h√†ng

    } catch (error) {
      toast.error("L·ªói khi gi·∫£i m√£ token!");
    }
  };

const handleConfirmOrder = async () => {
  if (!orderData) {
      toast.error("D·ªØ li·ªáu ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá ‚ùå");
      return;
  }
  await saveOrder(orderData);
  try {
      console.log("B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ƒë∆°n h√†ng...", orderData);

      // B∆∞·ªõc 1: Sinh m√£ ƒë∆°n h√†ng m·ªõi
      const orderID = await generateUniqueOrderID();
      console.log("M√£ ƒë∆°n h√†ng:", orderID);

      // B∆∞·ªõc 2: L·∫•y th√¥ng tin nh√¢n vi√™n (CH·∫ÆC CH·∫ÆN ph·∫£i c√≥ await)
      const employeeData = await getEmployeeData(orderData.employee_id);
      if (!employeeData || !employeeData.deptID) {
          console.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√≤ng ban c·ªßa nh√¢n vi√™n!");
          toast.error("L·ªói: Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n ‚ùå");
          return;
      }
      console.log("Th√¥ng tin nh√¢n vi√™n:", employeeData);

      // B∆∞·ªõc 3: ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë√£ c√≥ tr∆∞·ªõc khi insert
      const deptID = employeeData.deptID;
      const employeeID = orderData.employee_id;
      const timeString = getCurrentTimeString();
      console.log("D·ªØ li·ªáu s·∫Ω insert:", { orderID, deptID, employeeID, timeString });

      // B∆∞·ªõc 4: Insert d·ªØ li·ªáu (CH·∫ÆC CH·∫ÆN ph·∫£i c√≥ await)
      await insertData(orderID, deptID, employeeID, timeString);

      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      toast.success("L·∫•y h√†ng th√†nh c√¥ng! ‚úÖ");

      // Ghi log ho·∫°t ƒë·ªông
      activityLogger(`L·∫•y s·∫£n ph·∫©m ${orderData.productid} s·ªë l∆∞·ª£ng ${orderData.quantity} th√†nh c√¥ng`);

      // ƒê√≥ng modal & reset form
      setShowPreview(false);
      handleClose();
      resetForm();
  } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω ƒë∆°n xu·∫•t kho:", error);
      toast.error("L·ªói khi x·ª≠ l√Ω ƒë∆°n xu·∫•t kho ‚ùå");
  }
};

  const resetForm = () => {
    setProductID("");
    setQuantity("");
    setSelectedProduct(null);
    setOrderData(null);
    setShowPreview(false);
    setCountdown(300);
    setIsProductIDDisabled(false);
  };

  return (
    <>
      {/* Modal nh·∫≠p th√¥ng tin l·∫•y h√†ng */}
      <Modal show={show} onHide={() => { handleClose(); resetForm(); }} centered>
        <Modal.Header closeButton>
          <Modal.Title>L·∫•y h√†ng</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form.Group className="mb-3">
            <Form.Label>Nh·∫≠p m√£ s·∫£n ph·∫©m</Form.Label>
            <Form.Control
              type="text"
              value={productID}
              onChange={(e) => setProductID(e.target.value)}
              autoFocus
              disabled={isProductIDDisabled} // Disable √¥ nh·∫≠p m√£ s·∫£n ph·∫©m n·∫øu ƒë√£ ki·ªÉm tra
            />
          </Form.Group>
          <Button variant="info" className="mb-3 w-100" onClick={handleCheckProduct} disabled={!productID}>
            Ki·ªÉm tra
          </Button>

          {selectedProduct && (
            <>
              <Form.Group className="mb-3">
                <Form.Label>S·ªë l∆∞·ª£ng l·∫•y (T·ªëi ƒëa: {selectedProduct.QTY_AVAILABLE})</Form.Label>
                <Form.Control
                  type="number"
                  min="1"
                  value={quantity}
                  onChange={(e) => setQuantity(e.target.value)}
                />
                {parseInt(quantity) > selectedProduct.QTY_AVAILABLE && (
                  <Form.Text className="text-danger">
                    S·ªë l∆∞·ª£ng nh·∫≠p v√†o v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng t·ªëi ƒëa!
                  </Form.Text>
                )}
              </Form.Group>
              <Button
                variant="warning"
                className="w-100"
                onClick={handlePreviewOrder}
                disabled={!quantity || parseInt(quantity) > selectedProduct.QTY_AVAILABLE}
              >
                üîç Xem tr∆∞·ªõc ƒë∆°n h√†ng
              </Button>
            </>
          )}
        </Modal.Body>
      </Modal>

      {/* Modal xem tr∆∞·ªõc ƒë∆°n h√†ng */}
      <Modal show={showPreview} onHide={() => { setShowPreview(false); resetForm(); }} centered>
        <Modal.Header closeButton>
          <Modal.Title>üîç Xem tr∆∞·ªõc ƒë∆°n xu·∫•t kho</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {orderData && (
            <Table striped bordered hover>
              <tbody>
                <tr>
                  <td><strong>Nh√¢n vi√™n</strong></td>
                  <td>{orderData.employee_name} ({orderData.role})</td>
                </tr>
                <tr>
                  <td><strong>M√£ NV</strong></td>
                  <td>{orderData.employee_id}</td>
                </tr>
                <tr>
                  <td><strong>S·∫£n ph·∫©m</strong></td>
                  <td>{orderData.productname} (ID: {orderData.productid})</td>
                </tr>
                <tr>
                  <td><strong>S·ªë l∆∞·ª£ng</strong></td>
                  <td>{orderData.quantity} {selectedProduct.UNIT}</td>
                </tr>
                <tr>
                  <td><strong>Th·ªùi gian</strong></td>
                  <td>{new Date(orderData.timestamp).toLocaleString()}</td>
                </tr>
                <tr>
                  <td><strong>Th·ªùi gian c√≤n l·∫°i</strong></td>
                  <td>{Math.floor(countdown / 60)} ph√∫t {countdown % 60} gi√¢y</td>
                </tr>
              </tbody>
            </Table>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => { setShowPreview(false); resetForm(); handleClose() }}>‚ùå H·ªßy</Button>
          <Button variant="primary" onClick={handleConfirmOrder}>‚úÖ X√°c nh·∫≠n</Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default TakeProductModal;